/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 19 23:26:33 GMT 2020
 */

package model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.List;
import java.util.Map;
import model.Car;
import model.Client;
import model.Owner;
import model.Rental;
import model.UMCarroJa;
import model.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import utils.Point;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UMCarroJa_ESTest extends UMCarroJa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(zoneId0);
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "yyyy-MM-dd HH:mm", "yyyy-MM-dd HH:mm", "yyyy-MM-dd HH:mm", "yyyy-MM-dd HH:mm", 0);
      List<Rental> list0 = uMCarroJa0.getRentalListClient(client0, (LocalDateTime) null, localDateTime0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "", 1, "");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double((-2582.66));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 1.2, 0.0, 1.2, 1, point0, (String) null);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1, 1, 1, 1, 1);
      double double1 = uMCarroJa0.getTotalBilledCar(car0, (LocalDateTime) null, localDateTime0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("N[", "", "", (-549), "WmdUv^^N+-Nhf.t&");
      uMCarroJa0.addUser(owner0);
      try { 
        uMCarroJa0.logIn("N[", "rD");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      try { 
        uMCarroJa0.rate("3", (-868));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("Np", "", "", (-549), "WmdUv^^N+-Nhf.t&");
      uMCarroJa0.addUser(owner0);
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-2264.6875006));
      Point point0 = new Point(double0, double0);
      uMCarroJa0.addCar(owner0, "WmdUv^^N+-Nhf.t&", car_CarType0, (-549), (-2264.6875006), (-2264.6875006), (-549), point0, "$VALUES");
      assertEquals(100, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("v<6)4Am^w", "v<6)4Am^w", "v<6)4Am^w", (-549), "v<6)4Am^w");
      uMCarroJa0.addUser(owner0);
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-549));
      Point point0 = new Point(double0, double0);
      uMCarroJa0.addCar("H5[KNVM}*S&/NYVU ", "v<6)4Am^w", car_CarType0, (-588.0), (double) 16, (double) (-2895), (-2061), point0, "");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      try { 
        uMCarroJa0.addCar("", "@gmail.com", car_CarType0, (-1618.93265), 4251.326786658943, (-1.0), 0, point0, "AwzL{Sp5HJ}4E");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("N[", "", "", (-549), "WmdUv^^N+-Nhf.t&");
      uMCarroJa0.addUser(owner0);
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-2264.6875006));
      Point point0 = new Point(double0, double0);
      uMCarroJa0.addCar(owner0, "N[", car_CarType0, 0.0, 0.0, 0.0, 0, point0, "N[");
      Client client0 = new Client(point0, "N[", "", "", "", (-2895));
      Rental rental0 = uMCarroJa0.rental(point0, "N[", client0);
      assertNotNull(rental0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(956.50042);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "?8U,+kHm3^5", "?8U,+kHm3^5", "?8U,+kHm3^5", "hG>&aFrLkq=o", 100);
      uMCarroJa0.addUser(client0);
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      try { 
        uMCarroJa0.rental("?8U,+kHm3^5", point0, "hG>&aFrLkq=o", car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "", 0, "");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = Double.valueOf(26.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0, 26.0, 0, point0, "");
      owner0.addCar(car0);
      uMCarroJa0.swapState(owner0, 0);
      assertEquals(100, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "", 1, "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(1);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 1, 1, 1, 1, point0, "");
      owner0.addCar(car0);
      uMCarroJa0.setBasePrice(owner0, 0, 0);
      assertEquals(100, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "", 1, "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(1);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 1, 1, 1, 1, point0, "");
      owner0.addCar(car0);
      uMCarroJa0.refil(owner0, 0);
      assertEquals(100, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "", (-3), "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-3));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-3), (-3), (-3), (-3), point0, "");
      Client client0 = new Client(point0, "", "", "", "", (-3));
      Rental rental0 = new Rental(car0, client0, point0);
      uMCarroJa0.rate(owner0, rental0, (-3));
      assertEquals((-3), client0.getRates());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "(\"Y5=$.9L", "MaisBarato", "MaisBarato", "1O|1/A", (-2338));
      Owner owner0 = new Owner("J!^5/:YMI>bt", (String) null, "MaisBarato", 1, "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Car car0 = new Car("MaisBarato", owner0, car_CarType0, (-2338), 0.0, 0.0, 0, point0, "1O|1/A");
      Rental rental0 = new Rental(car0, client0, point0);
      uMCarroJa0.rate(client0, rental0, 0, (-2338));
      assertEquals((-2338), owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("N[", "", "", (-549), "WmdUv^^N+-Nhf.t&");
      uMCarroJa0.addUser(owner0);
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-2264.6875006));
      Point point0 = new Point(double0, double0);
      uMCarroJa0.addCar(owner0, "N[", car_CarType0, 0.0, 0.0, 0.0, (-549), point0, "N[");
      uMCarroJa0.rate("N[", (-549));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("Np", "", "", (-549), "WmdUv^^N+-Nhf.t&");
      uMCarroJa0.addUser(owner0);
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-2264.6875006));
      Point point0 = new Point(double0, double0);
      uMCarroJa0.addCar(owner0, "Np", car_CarType0, 0.0, 0.0, 0.0, 36, point0, "Np");
      Client client0 = new Client(point0, "I&", "y/", "", "model.UMCarroJa", 36);
      Rental rental0 = uMCarroJa0.rental(point0, (-2264.6875006), car_CarType0, client0);
      assertNotNull(rental0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("Np", "", "", (-549), "WmdUv^^N+-Nhf.t&");
      uMCarroJa0.addUser(owner0);
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-2264.6875006));
      Point point0 = new Point(double0, double0);
      uMCarroJa0.addCar(owner0, "~", car_CarType0, 0.0, 0.0, 12.808152696381969, 2416, point0, "~");
      Client client0 = new Client(point0, "WmdUv^^N+-Nhf.t&", "~", "", (String) null, (-549));
      Rental rental0 = uMCarroJa0.rental(client0, point0, 238.7, car_CarType0);
      assertNotNull(rental0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("v\u000E)4Am^w", "v\u000E)4Am^w", "v\u000E)4Am^w", (-2582), "v\u000E)4Am^w");
      owner0.rate(0);
      uMCarroJa0.addUser(owner0);
      User user0 = uMCarroJa0.logIn("v\u000E)4Am^w", "v\u000E)4Am^w");
      assertEquals(0, user0.getRates());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("v\u000E)4Am^w", "v\u000E)4Am^w", "v\u000E)4Am^w", (-2582), "v\u000E)4Am^w");
      owner0.rate((-2582));
      uMCarroJa0.addUser(owner0);
      User user0 = uMCarroJa0.logIn("v\u000E)4Am^w", "v\u000E)4Am^w");
      assertEquals((-2582), user0.getRates());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Double double0 = new Double(704.8000133308);
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("ANY", "Hibrido", "", 0, "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("ANY", owner0, car_CarType0, 1.0, 8.0982221E7, 0.0, (-1383), point0, "Hibrido");
      Client client0 = new Client(point0, "", "", "tOHn,0lY+E\fz", "exceptions.WrongPasswordExecption", 80982221);
      Rental rental0 = new Rental(car0, client0, point0);
      uMCarroJa0.rent(rental0);
      List<Rental> list0 = uMCarroJa0.getRentalListOwner(owner0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double double0 = new Double(704.8000133308);
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("ANY", "Hibrido", "", 0, "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("ANY", owner0, car_CarType0, 8.0982221E7, 8.0982221E7, 0.0, (-1383), point0, "Hibrido");
      Client client0 = new Client(point0, "", "", "tOHn,0lY+E\fz", "ANY", 80982221);
      Rental rental0 = new Rental(car0, client0, point0);
      uMCarroJa0.rent(rental0);
      List<Rental> list0 = uMCarroJa0.getRentalListClient(client0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("d![ud89TCi^*AW", "d![ud89TCi^*AW", "d![ud89TCi^*AW", (-585), "d![ud89TCi^*AW");
      uMCarroJa0.addUser(owner0);
      List<Map.Entry<String, Double>> list0 = (List<Map.Entry<String, Double>>)uMCarroJa0.getBestClientsTravel();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-4278.65653));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, ".s", "", ".s", ",i&\"qD;=U=fosA<NrM|", 0);
      uMCarroJa0.addUser(client0);
      List<Map.Entry<String, Double>> list0 = (List<Map.Entry<String, Double>>)uMCarroJa0.getBestClients();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.swapState((Owner) null, (-1380));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "", (-382), "Electrico");
      // Undeclared exception!
      try { 
        uMCarroJa0.swapState(owner0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.setBasePrice((Owner) null, 31, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner((String) null, (String) null, (String) null, (-1702), (String) null);
      // Undeclared exception!
      try { 
        uMCarroJa0.setBasePrice(owner0, (-4679), 690.9203868996381);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.save((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      try { 
        uMCarroJa0.save("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("d!:d[ud8rTCi^rAW", "", "", (-585), "WdUv^^+-Nf.t&");
      uMCarroJa0.addUser(owner0);
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(16);
      Point point0 = new Point(double0, double0);
      uMCarroJa0.addCar(owner0, "d!:d[ud8rTCi^rAW", car_CarType0, (-585), (-585), (-585), 16, point0, "d!:d[ud8rTCi^rAW");
      Client client0 = new Client(point0, "d!:d[ud8rTCi^rAW", "", "", "d!:d[ud8rTCi^rAW", (-585));
      // Undeclared exception!
      try { 
        uMCarroJa0.rental((Point) null, "d!:d[ud8rTCi^rAW", client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("utils.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Client client0 = new Client((Point) null, "", "ig_=26HpHdToqt]", "_3", "", 0);
      Car.CarType car_CarType0 = Car.CarType.ANY;
      // Undeclared exception!
      try { 
        uMCarroJa0.rental(client0, (Point) null, "ig_=26HpHdToqt]", car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "yyyy-MM-dd HH:mm", "yyyy-MM-dd HH:mm", "yyyy-MM-dd HH:mm", "yyyy-MM-dd HH:mm", 0);
      Car.CarType car_CarType0 = Car.CarType.GAS;
      try { 
        uMCarroJa0.rental(client0, point0, (double) 0, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("v\u000E)4Am^w", "v\u000E)4Am^w", "v\u000E)4Am^w", (-549), "v\u000E)4Am^w");
      uMCarroJa0.addUser(owner0);
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-549));
      Point point0 = new Point(double0, double0);
      // Undeclared exception!
      try { 
        uMCarroJa0.rental("v\u000E)4Am^w", point0, (String) null, car_CarType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // model.Owner cannot be cast to model.Client
         //
         verifyException("model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      System.setCurrentTimeMillis((-2173L));
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("WmdUv^^N+-Nhf.t&", "%V\",t2 ", "%V\",t2 ", 2928, "WmdUv^^N+-Nhf.t&");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double((-969.693268452));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("WmdUv^^N+-Nhf.t&", owner0, car_CarType0, 3594.063513842, (-2173L), 2928, 2928, point0, "WmdUv^^N+-Nhf.t&");
      Client client0 = new Client(point0, "", "-'cpxS", "WmdUv^^N+-Nhf.t&", "@gmail.com", 1);
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        uMCarroJa0.rent(rental0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("model.Weather", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", ":J{i7OJQN=", "", 4, "");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double((-2089443549));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(":J{i7OJQN=", owner0, car_CarType0, 4, 923.337, (-1249.1), (-2089443549), point0, "model.UMCarroJa");
      Rental rental0 = new Rental(car0, (Client) null, point0);
      car0.pendingRental(rental0);
      Rental rental1 = new Rental(car0, (Client) null, point0);
      // Undeclared exception!
      try { 
        uMCarroJa0.refuse(owner0, rental1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.refil((Owner) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "", 0, "");
      // Undeclared exception!
      try { 
        uMCarroJa0.refil(owner0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        UMCarroJa.read((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("z.:0=&[`H");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "|9psqUk");
      try { 
        UMCarroJa.read("z.:0=&[`H");
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 7C397073
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("exceptions.CarExistsException");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      try { 
        UMCarroJa.read("exceptions.CarExistsException");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("z.:0=&[`H");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      try { 
        UMCarroJa.read("z.:0=&[`H");
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("v\u000E)4Am^w", "v\u000E)4Am^w", (String) null, (-2582), (String) null);
      uMCarroJa0.addUser(owner0);
      // Undeclared exception!
      try { 
        uMCarroJa0.logIn("v\u000E)4Am^w", "v\u000E)4Am^w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.getTotalBilledCar((Car) null, (LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.getTotalBilledCar((Car) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(zoneId0);
      // Undeclared exception!
      try { 
        uMCarroJa0.getRentalListOwner((Owner) null, (LocalDateTime) null, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.getRentalListOwner((Owner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(2, 2, 2, 2, 0);
      // Undeclared exception!
      try { 
        uMCarroJa0.getRentalListClient((Client) null, localDateTime0, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.getRentalListClient((Client) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("N[", "", "", (-549), "WmdUv^^N+-Nhf.t&");
      uMCarroJa0.addUser(owner0);
      try { 
        uMCarroJa0.addUser(owner0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.addUser((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-3795.0));
      Point point0 = new Point(double0, double0);
      // Undeclared exception!
      try { 
        uMCarroJa0.addCar((Owner) null, "Carro:          ", car_CarType0, (-3795.0), 0.0, 0.0, (-2384), point0, "%.2f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-151.4571699));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "d![ud89TCi^*AW", "d![ud89TCi^*AW", (String) null, "d![ud89TCi^*AW", (-226));
      uMCarroJa0.addUser(client0);
      Owner owner0 = new Owner("d![ud89TCi^*AW", "d![ud89TCi^*AW", "d![ud89TCi^*AW", (-615), "d![ud89TCi^*AW");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      // Undeclared exception!
      try { 
        uMCarroJa0.addCar(owner0, "d![ud89TCi^*AW", car_CarType0, (-615), (-615), (-615), 381, point0, "d![ud89TCi^*AW");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // model.Client cannot be cast to model.Owner
         //
         verifyException("model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("d![ud89TCi^*AW", "d![ud89TCi^*AW", "d![ud89TCi^*AW", (-585), "d![ud89TCi^*AW");
      uMCarroJa0.addUser(owner0);
      User user0 = uMCarroJa0.logIn("d![ud89TCi^*AW", "d![ud89TCi^*AW");
      assertEquals(100, user0.getRates());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("N[", "", "", (-549), "WmdUv^^N+-Nhf.t&");
      uMCarroJa0.addUser(owner0);
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-2264.6875006));
      Point point0 = new Point(double0, double0);
      uMCarroJa0.addCar(owner0, "N[", car_CarType0, 0.0, 0.0, 0.0, (-549), point0, "N[");
      Client client0 = new Client(point0, "N[", "", "", "", (-2895));
      try { 
        uMCarroJa0.rental(point0, "N[", client0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("d![ud89TCi^*AW", "d![ud89TCi^*AW", "d![ud89TCi^*AW", (-585), "d![ud89TCi^*AW");
      uMCarroJa0.addUser(owner0);
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(381);
      Point point0 = new Point(double0, double0);
      uMCarroJa0.addCar(owner0, "d![ud89TCi^*AW", car_CarType0, (-585), (-585), (-585), 381, point0, "d![ud89TCi^*AW");
      Client client0 = new Client(point0, "d![ud89TCi^*AW", "d![ud89TCi^*AW", "d![ud89TCi^*AW", "d![ud89TCi^*AW", (-585));
      Rental rental0 = uMCarroJa0.rental(point0, "d![ud89TCi^*AW", client0);
      assertNotNull(rental0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "", 4, "");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(4);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 4, 4, 4, 4, point0, "");
      Rental rental0 = new Rental(car0, (Client) null, point0);
      uMCarroJa0.refuse(owner0, rental0);
      assertEquals(100, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("A2}*uvGyBpQL`K#Do", "A2}*uvGyBpQL`K#Do", "A2}*uvGyBpQL`K#Do", (-113746493), "A2}*uvGyBpQL`K#Do");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double((-113746493));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("A2}*uvGyBpQL`K#Do", owner0, car_CarType0, (-113746493), (-113746493), (-113746493), (-113746493), point0, "A2}*uvGyBpQL`K#Do");
      double double1 = uMCarroJa0.getTotalBilledCar(car0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      List<Map.Entry<String, Integer>> list0 = (List<Map.Entry<String, Integer>>)uMCarroJa0.getBestClientsTimes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner((String) null, (String) null, "x;c9", (-363), "");
      // Undeclared exception!
      try { 
        uMCarroJa0.refil(owner0, (-1536));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      try { 
        uMCarroJa0.save("QIf__/");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("N>", "N>", "N>", (-549), "N>");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-549));
      Point point0 = new Point(double0, double0);
      try { 
        uMCarroJa0.addCar(owner0, "N>", car_CarType0, (-549), (-549), (-549), (-549), point0, "N>");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.rate((Client) null, (Rental) null, 80982202, 80982202);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("lAI^9d'2e3jx[gpgEY", "lAI^9d'2e3jx[gpgEY", "lAI^9d'2e3jx[gpgEY", (-409), "lAI^9d'2e3jx[gpgEY");
      List<Rental> list0 = uMCarroJa0.getRentalListOwner(owner0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("yyyy-MM-dd HH:mm", "yyyy-MM-dd HH:mm", "yyyy-MM-dd HH:mm", 0, "yyyy-MM-dd HH:mm");
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(zoneId0);
      List<Rental> list0 = uMCarroJa0.getRentalListOwner(owner0, localDateTime0, localDateTime0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("v\u000E)4Am^w", "v\u000E)4Am^w", "v\u000E)4Am^w", (-2582), "v\u000E)4Am^w");
      uMCarroJa0.addUser(owner0);
      List<Map.Entry<String, Integer>> list0 = (List<Map.Entry<String, Integer>>)uMCarroJa0.getBestClientsTimes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      List<Map.Entry<String, Double>> list0 = (List<Map.Entry<String, Double>>)uMCarroJa0.getBestClients();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "", 1, "");
      // Undeclared exception!
      try { 
        uMCarroJa0.setBasePrice(owner0, 0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "", 13, "");
      // Undeclared exception!
      try { 
        uMCarroJa0.swapState(owner0, 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.rent((Rental) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-2582));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "v\u000E)4Am^w", "v\u000E)4Am^w", "v\u000E)4Am^w", "v\u000E)4Am^w", 7);
      List<Rental> list0 = uMCarroJa0.getRentalListClient(client0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(4);
      Point point0 = new Point(double0, double0);
      try { 
        uMCarroJa0.rental(point0, (double) 4, car_CarType0, (Client) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(8.766999827947512);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "lAI^9d'2e3jx[gpgEY", "lAI^9d'2e3jx[gpgEY", "lAI^9d'2e3jx[gpgEY", "lAI^9d'2e3jx[gpgEY", (-409));
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      try { 
        uMCarroJa0.rental(client0, point0, "lAI^9d'2e3jx[gpgEY", car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      try { 
        UMCarroJa.read("z.:0=&[`H");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("*`Pa4=", "*`Pa4=", "*`Pa4=", 8, "*`Pa4=");
      // Undeclared exception!
      try { 
        uMCarroJa0.rate(owner0, (Rental) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Owner", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car.CarType car_CarType0 = Car.CarType.ANY;
      // Undeclared exception!
      try { 
        uMCarroJa0.rental((Client) null, point0, (-507.03084385), car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      List<Map.Entry<String, Double>> list0 = (List<Map.Entry<String, Double>>)uMCarroJa0.getBestClientsTravel();
      assertTrue(list0.isEmpty());
  }
}
