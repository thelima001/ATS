/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 19 23:10:11 GMT 2020
 */

package model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import model.Car;
import model.Client;
import model.Owner;
import model.Rental;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import utils.Point;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Client_ESTest extends Client_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double((-85.6550003844));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "b~9\"AzFB", "", "", "#D;924}T&%1T*x6", 0);
      client0.rate(0);
      Client client1 = client0.makeCopy();
      assertEquals(0, client1.getRates());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(878.935109231);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "Gb6k]l)WD7R.8g=&|0|", "", "", "", (-2615));
      client0.rate((-530));
      Client client1 = client0.makeCopy();
      assertNotSame(client0, client1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double((-85.6550003844));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "b~9\"AzFB", "", "", "#D;924}T&%1T*x6", 0);
      Point point1 = client0.getPos();
      assertNotSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(443.659417351678);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, "6+9mekA66", (String) null, (String) null, 0);
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Car car0 = new Car("", (Owner) null, car_CarType0, 0.0, 4366.7906601, 0.0, 0, point0, (String) null);
      Rental rental0 = new Rental(car0, client0, point0);
      client0.addPendingRental(rental0);
      List<Rental> list0 = client0.getPendingRates();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double((-3283.7));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, (String) null, (String) null, "YC@A+}<d1f##aL+", (-1392));
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Car car0 = new Car((String) null, (Owner) null, car_CarType0, (-1392), (-1392), (-261.31486), (-1392), point0, "mE:MbhV%)9O]fjri");
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        client0.rate(rental0, (-1392), 239);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Client client0 = new Client((Point) null, "/p$Z?Inb.p)knbY=*.C", "HYBRID", "/p$Z?Inb.p)knbY=*.C", "HYBRID", 0);
      // Undeclared exception!
      try { 
        client0.makeCopy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Client client0 = new Client((Point) null, "Viagem:         ", "", "Viagem:         ", "", (-891));
      // Undeclared exception!
      try { 
        client0.getPos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Double double0 = new Double((-1026.17986));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "[FNoZ^eD(-[9$", "[FNoZ^eD(-[9$", "[FNoZ^eD(-[9$", "", 22);
      Client client1 = new Client(point0, "[FNoZ^eD(-[9$", "model.Client", "model.Client", "G", 0);
      Owner owner0 = new Owner("[FNoZ^eD(-[9$", "", "model.Client", 1000, "/2;%");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Car car0 = new Car("'G]*YVb", owner0, car_CarType0, (-1026.17986), 0, (-1026.17986), 31, point0, "(-1026.18, -1026.18)");
      Rental rental0 = new Rental(car0, client1, point0);
      client0.addPendingRental(rental0);
      Rental rental1 = new Rental(car0, client0, point0);
      client1.addPendingRental(rental1);
      // Undeclared exception!
      try { 
        client0.equals(client1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Double double0 = new Double((-1026.17986));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "'FNoZ^eD(-[9$", "|}je:iS Bdkw", "|}je:iS Bdkw", "", 0);
      client0.setPos((Point) null);
      Client client1 = new Client(point0, "'FNoZ^eD(-[9$", "model.Client", "model.Client", "G", 0);
      // Undeclared exception!
      try { 
        client0.equals(client1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Double double0 = new Double((-729.0));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "^1pr'uv_ZuGBwt", "^1pr'uv_ZuGBwt", "", "^1pr'uv_ZuGBwt", 31);
      Client client1 = client0.makeCopy();
      boolean boolean0 = client1.equals(client0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Double double0 = new Double((-1026.17986));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "*- I :Y", "*- I :Y", "*- I :Y", "*- I :Y", 47);
      Client client1 = new Client(point0, "*- I :Y", "(-1026.18, -1026.18)", "(-1026.18, -1026.18)", "*- I :Y", 47);
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Car car0 = new Car("*- I :Y", (Owner) null, car_CarType0, (-1026.17986), (-1026.17986), (-1026.17986), 47, point0, "(-1026.18, -1026.18)");
      Rental rental0 = new Rental(car0, client0, point0);
      assertTrue(client0.equals((Object)client1));
      
      client1.addPendingRental(rental0);
      boolean boolean0 = client0.equals(client1);
      assertFalse(client1.equals((Object)client0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double((-1026.17986));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "*- I :Y", "*- I :Y", "*- I :Y", "*- I :Y", 47);
      Client client1 = new Client(point0, "*- I :Y", "(-1026.18, -1026.18)", "(-1026.18, -1026.18)", "*- I :Y", 47);
      boolean boolean0 = client0.equals(client1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double double0 = new Double((-1196.5422799222222));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "", "", 916);
      boolean boolean0 = client0.equals(point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double double0 = new Double(477.9673785809531);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, (String) null, "", (String) null, 1);
      boolean boolean0 = client0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Double double0 = new Double((-1026.17986));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "'FNoZ^eD(-[9$", "|}je:iS Bdkw", "|}je:iS Bdkw", "", 0);
      boolean boolean0 = client0.equals(client0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(2710.5175799762665);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "pN;DGZCCp65R'z%=", "pN;DGZCCp65R'z%=", "pN;DGZCCp65R'z%=", "(2710.52, 2710.52)", 377);
      client0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double((-3283.7));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, (String) null, (String) null, "YC@A+}<d1f##aL+", (-1392));
      List<Rental> list0 = client0.getPendingRates();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double double0 = new Double(2710.5175799762665);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "pN;DGZCCp65R'z%=", "pN;DGZCCp65R'z%=", "pN;DGZCCp65R'z%=", "(2710.52, 2710.52)", 377);
      Owner owner0 = new Owner("pN;DGZCCp65R'z%=", "(2710.52, 2710.52)", "(2710.52, 2710.52)", 377, "pN;DGZCCp65R'z%=");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Car car0 = new Car("(2710.52, 2710.52)", owner0, car_CarType0, 377, 2710.5175799762665, 2710.5175799762665, 377, point0, "(2710.52, 2710.52)");
      Rental rental0 = new Rental(car0, client0, point0);
      client0.rate(rental0, 377, 377);
      assertEquals(377, owner0.getRates());
  }
}
