/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 19 22:59:08 GMT 2020
 */

package model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import model.Car;
import model.Client;
import model.Owner;
import model.Rental;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import utils.Point;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Car_ESTest extends Car_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Owner owner0 = new Owner("5~#Y~c)W7l1WwIn^h8", "", "", 100, "");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(0.1);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("5~#Y~c)W7l1WwIn^h8", owner0, car_CarType0, 0.0, (-537.6720249481157), 0.0, 100, point0, "");
      Car car1 = car0.copy();
      car1.hashCode();
      assertFalse(car1.equals((Object)car0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Owner owner0 = new Owner("=Ck", "hc", "hc", 0, "=Ck");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-45.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hc", owner0, car_CarType0, (-869.23), (-869.23), (-45.0), 0, point0, "hc");
      Car car1 = car0.copy();
      Car car2 = car0.copy();
      assertTrue(car2.equals((Object)car1));
      
      car2.rate(0, 0);
      boolean boolean0 = car1.equals(car2);
      assertFalse(car2.equals((Object)car1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Owner owner0 = new Owner("=Ck", "hc", "hc", 0, "=Ck");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-45.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hc", owner0, car_CarType0, (-869.23), (-869.23), (-45.0), 0, point0, "hc");
      Car car1 = car0.copy();
      boolean boolean0 = car0.equals(car1);
      assertFalse(car1.equals((Object)car0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Owner owner0 = new Owner("", "~", "", (-2441), "");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(995.5270990627);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-2441), (-2441), 1.0, (-2441), point0, "");
      Car car1 = new Car("s*X OF27WzR+", owner0, car_CarType0, (-2441), (-2441), (-2441), 1, point0, "");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "", "GAS", 31, "GAS");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(314.12183165807);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 314.12183165807, 0.1, 314.12183165807, 17, point0, "Carro:          ");
      Car car1 = new Car((String) null, owner0, car_CarType0, 314.12183165807, 314.12183165807, 0.0, 31, point0, (String) null);
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Owner owner0 = new Owner("", "~", "", (-2441), "");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(995.5270990627);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-2441), (-324.7656044588302), 1.0, (-2441), point0, "");
      Car car1 = new Car("s*X OF27WzR+", owner0, car_CarType0, (-324.7656044588302), (-324.7656044588302), (-324.7656044588302), 1, point0, "");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(1400);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, car_CarType0, 1.0, 1.0, 1.0, 1400, point0, "'Yip14(-2>[");
      String string0 = car0.warnings();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Owner owner0 = new Owner("!8EXUr8lA", "EvP5w", "EvP5w", 1267, "n}E+W58 ");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(150.31102);
      Double double1 = new Double(1267);
      Point point0 = new Point(double0, double1);
      Car car0 = new Car("EvP5w", owner0, car_CarType0, 2022.4888, 150.31102, (-649.4782167600519), 1267, point0, "+/ugB6K");
      Point point1 = new Point(double1, double1);
      boolean boolean0 = car0.hasRange(point1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Owner owner0 = new Owner("ANY", "ANY", "%.2f", (-940), "^|eRc");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("^|eRc", owner0, car_CarType0, (-940), 0.0, (-940), (-940), point0, "O carro necessita de ser abastecido\n");
      car0.rate((-940), (-369));
      car0.rate((-369), 1949);
      String string0 = car0.toString();
      assertEquals(790, owner0.getRates());
      assertEquals("^|eRc\n-940.00\n0.00\ntrue\n-654", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Owner owner0 = new Owner("GAS", "GAS", "", (-130), "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Car car0 = new Car("GAS", owner0, car_CarType0, (-130), 2597.0291545347, 2597.0291545347, (-130), (Point) null, "");
      boolean boolean0 = car0.isAvailable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Owner owner0 = new Owner("!#27bxyW>z", ":n9u3%cVv,W^", ":n9u3%cVv,W^", 31, "t%V0=azl-j{q5w%<i");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Car car0 = new Car(":n9u3%cVv,W^", owner0, car_CarType0, 31, (-4074.875), 31, 0, (Point) null, "!#27bxyW>z");
      double double0 = car0.getRange();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Owner owner0 = new Owner("!8EXUr8lA", "EvP5w", "EvP5w", 1267, "n}E+W58 ");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(150.31102);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("EvP5w", owner0, car_CarType0, 2022.4888, 150.31102, (-649.4782167600519), 1267, point0, "+/ugB6K");
      double double1 = car0.getRange();
      assertEquals(1267.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Owner owner0 = new Owner("3S~vy[<H6d)f>2", "3S~vy[<H6d)f>2", "3S~vy[<H6d)f>2", (-1163), "3S~vy[<H6d)f>2");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double((-1163));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("3S~vy[<H6d)f>2", owner0, car_CarType0, (-3046.964751438807), (-3046.964751438807), 2368.71, (-1163), point0, "");
      double double1 = car0.getRange();
      assertEquals((-1163.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Owner owner0 = new Owner("wo<s", (String) null, "ux f/g@wJ%", (-937), "wo<s");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Car car0 = new Car("", owner0, car_CarType0, (-937), (-937), (-937), 1, (Point) null, "ux f/g@wJ%");
      Point point0 = car0.getPosition();
      assertNull(point0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Owner owner0 = new Owner("Custo Estimado: ", "Custo Estimado: ", "V0L.si$@o", 100, "CyM,'X");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Custo Estimado: ", owner0, car_CarType0, 100, (-1.0), (-1.0), 1221, point0, "CyM,'X");
      Point point1 = car0.getPosition();
      assertSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "xxX", "1!cX_Qqck/b_5", (-2056), "SsRsg");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("SsRsg", owner0, car_CarType0, (-2056), 0.0, 0.0, (-2056), point0, "SsRsg");
      String string0 = car0.getOwnerID();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Owner owner0 = new Owner("", "", "{9<:Zv(;HbG@Q", (-167), "ANY");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-167));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-167), (-167), 980.9084848501925, 4096, point0, "vqu-9]$<");
      String string0 = car0.getOwnerID();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Owner owner0 = new Owner("ANY", "t6y-}`X&5GDo ,<5#hS", "ANY", (-1), "t6y-}`X&5GDo ,<5#hS");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = Double.valueOf(84.03);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, (-1.0), (-1.0), 0.1, 3843, point0, "");
      String string0 = car0.getNumberPlate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Owner owner0 = new Owner("!8EXUr8lA", "EvP5w", "EvP5w", 1267, "n}E+W58 ");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(150.31102);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("EvP5w", owner0, car_CarType0, 2022.4888, 150.31102, (-649.4782167600519), 1267, point0, "+/ugB6K");
      String string0 = car0.getNumberPlate();
      assertEquals("EvP5w", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 1001, "");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(1.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 866.9, 866.9, (-1360.4949), 1001, point0, "P-L0W_'|i<pk;S>");
      String string0 = car0.getNumberPlate();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Car car0 = new Car("m\" ", (Owner) null, car_CarType0, 0.0, 0.0, 0.0, 4, (Point) null, "");
      double double0 = car0.getBasePrice();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Owner owner0 = new Owner("!8EXUr8lA", "EvP5w", "EvP5w", 1267, "n}E+W58 ");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(150.31102);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("EvP5w", owner0, car_CarType0, 2022.4888, 150.31102, (-649.4782167600519), 1267, point0, "+/ugB6K");
      double double1 = car0.getBasePrice();
      assertEquals(150.31102, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(104.193001578359);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("HS(7zXZmDo/r", (Owner) null, car_CarType0, (-4012.62035), (-4012.62035), (-5445.9023571), 0, point0, ".c|z");
      double double1 = car0.getBasePrice();
      assertEquals((-4012.62035), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Owner owner0 = new Owner("", "", "", (-390), (String) null);
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0.0, (-562.405006831), (-390), (-390), point0, "");
      double double1 = car0.getAvgSpeed();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 1001, "");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(1.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 866.9, 866.9, (-1360.4949), 1001, point0, "P-L0W_'|i<pk;S>");
      double double1 = car0.getAvgSpeed();
      assertEquals(866.9, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", (-2117), "");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-2117));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-2117), (-2117), 0.0, 3, point0, "e6 X,>W^{");
      double double1 = car0.getAvgSpeed();
      assertEquals((-2117.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Car car0 = new Car("oWC4%.{&s1Yy0", (Owner) null, car_CarType0, 0.15, (-804.2786), (-1396.241), 0, (Point) null, "");
      // Undeclared exception!
      try { 
        car0.setPosition((Point) null, (-804.2786));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-45.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, car_CarType0, (-1463), 1.0, (-1463), (-1336218247), point0, "yC");
      Client client0 = new Client(point0, "model.Traffic", (String) null, "", (String) null, (-1463));
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        car0.pendingRental(rental0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Car car0 = new Car("Viagem:         ", (Owner) null, car_CarType0, (-45.0), 0.4, 0.4, (-858), (Point) null, "\u001B[32m");
      // Undeclared exception!
      try { 
        car0.hasRange((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = Double.valueOf(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("7xW", (Owner) null, car_CarType0, 0.0, 0.0, 0.0, (-3456), point0, "7xW");
      // Undeclared exception!
      try { 
        car0.getOwnerID();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(1400);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, car_CarType0, 1.0, 1.0, 1.0, 1400, point0, "'Yip14(-2>[");
      Car car1 = car0.copy();
      Car car2 = car1.copy();
      // Undeclared exception!
      try { 
        car1.equals(car2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(100);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("ANY", (Owner) null, car_CarType0, 0.0, 0.0, (-1872.183676), 100, point0, "ANY");
      Client client0 = new Client(point0, "", "", "", "ANY", 814);
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        car0.approvePendingRental(rental0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Owner owner0 = new Owner("=Ck", "hc", "hc", 0, "=Ck");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-45.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hc", owner0, car_CarType0, (-870.2603109794259), (-870.2603109794259), (-45.0), 0, point0, "hc");
      Car car1 = car0.copy();
      Car car2 = car0.copy();
      assertTrue(car2.equals((Object)car1));
      
      car2.approvePendingRental((Rental) null);
      boolean boolean0 = car1.equals(car2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Owner owner0 = new Owner("hc", "hc", "hc", 0, "hc");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-869.23));
      Point point0 = new Point(double0, double0);
      Point point1 = new Point(point0);
      Car car0 = new Car("hc", owner0, car_CarType0, (-869.23), (-869.23), 0, 0, point1, "hc");
      car0.setBasePrice(0);
      Car car1 = new Car("hc", owner0, car_CarType0, (-869.23), 0, 0, 0, point0, "hc");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Owner owner0 = new Owner("k", "h]", "h]", 0, "k");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("h]", owner0, car_CarType0, 0, 0, 0, 0, point0, "h]");
      Car car1 = new Car("h]", owner0, car_CarType0, 0, 0, 0, 0, point0, "k");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Owner owner0 = new Owner("=Ck", "hc", "hc", 0, "=Ck");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-869.23));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hc", owner0, car_CarType0, (-869.23), (-869.23), 0, 0, point0, "hc");
      car0.rate(0, 0);
      car0.setBasePrice(0);
      Car car1 = new Car("hc", owner0, car_CarType0, (-869.23), 0, 0, 0, point0, "=Ck");
      car0.equals(car1);
      assertEquals(0, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Owner owner0 = new Owner("=Ck", "hc", "hc", 0, "=Ck");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-45.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hc", owner0, car_CarType0, (-870.2603109794259), (-870.2603109794259), (-45.0), 0, point0, "hc");
      Car car1 = car0.copy();
      Car car2 = car0.copy();
      boolean boolean0 = car2.equals(car1);
      assertFalse(car2.equals((Object)car0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Owner owner0 = new Owner("hc", "hc", "hc", 0, "hc");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-869.23));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hc", owner0, car_CarType0, (-869.23), (-869.23), 0, 0, point0, "hc");
      car0.setBasePrice(0);
      Double double1 = new Double(811.22007840933);
      Point point1 = new Point(double0, double1);
      car0.setPosition(point1, 3491.4241078765);
      Car car1 = new Car("hc", owner0, car_CarType0, (-869.23), 0, 0, 0, point0, "hc");
      boolean boolean0 = car0.equals(car1);
      assertFalse(car1.equals((Object)car0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Owner owner0 = new Owner("hc", "hc", "hc", 0, "hc");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-869.23));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hc", owner0, car_CarType0, (-869.23), (-869.23), (-869.23), 0, point0, "hc");
      Car car1 = car0.copy();
      car0.setBasePrice(0);
      car1.swapState();
      car1.setBasePrice(0.0);
      boolean boolean0 = car1.equals(car0);
      assertFalse(car1.equals((Object)car0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", (-2441), "");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(995.5270990627);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-2441), (-2441), (-2441), (-2441), point0, "");
      Car car1 = new Car("s*X OF27WzR+", owner0, car_CarType0, (-2441), (-2441), (-2441), 1, point0, "");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Owner owner0 = new Owner("=Ck", "hc", "hc", 0, "=Ck");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-45.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hc", owner0, car_CarType0, (-869.23), (-869.23), (-45.0), 0, point0, "hc");
      car0.setBasePrice(0);
      Car car1 = new Car("hc", owner0, car_CarType0, (-869.23), 0, 0, 0, point0, "=Ck");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Owner owner0 = new Owner("=Ck", "hc", "hc", 0, "=Ck");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-45.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hc", owner0, car_CarType0, (-870.2603109794259), (-870.2603109794259), (-45.0), 0, point0, "hc");
      Car car1 = car0.copy();
      car1.setBasePrice(0.0);
      boolean boolean0 = car1.equals(car0);
      assertFalse(car1.equals((Object)car0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Owner owner0 = new Owner("=Ck", "hc", "hc", 2, "=Ck");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0.1);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hc", owner0, car_CarType0, 0.1, 0.1, 2, 2, point0, "hc");
      Car car1 = new Car("hc\n2.00\n0.10\ntrue\n100", owner0, car_CarType0, (-1.1707819389212137), 2, 2, 2, point0, "=Ck");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Owner owner0 = new Owner("hc", "hc", "hc", 0, "hc");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-869.23));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hc", owner0, car_CarType0, (-869.23), (-869.23), (-869.23), 0, point0, "hc");
      boolean boolean0 = car0.equals("'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Owner owner0 = new Owner("hc", "hc", "hc", 0, "hc");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-869.23));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hc", owner0, car_CarType0, (-869.23), (-869.23), (-869.23), 0, point0, "hc");
      boolean boolean0 = car0.equals(car0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Owner owner0 = new Owner("hc", "hc", "hc", 0, "hc");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-869.23));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hc", owner0, car_CarType0, (-869.23), (-869.23), (-869.23), 0, point0, "hc");
      Car car1 = car0.copy();
      boolean boolean0 = car1.equals(car0);
      assertFalse(boolean0);
      assertFalse(car0.equals((Object)car1));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Owner owner0 = new Owner("$VALUES", "=Ck", "$VALUES", (-1768), "\u001B[36m");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(1.0);
      Double double1 = new Double(0.15);
      Point point0 = new Point(double0, double1);
      Car car0 = new Car("$VALUES", owner0, car_CarType0, (-1768), (-1768), (-1768), 1, point0, "=Ck");
      Point point1 = new Point(double1, double0);
      car0.setPosition(point1, (-2973.46058));
      String string0 = car0.warnings();
      assertEquals("O carro necessita de ser abastecido\n", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Owner owner0 = new Owner("Electrico", "Electrico", "=Ck", 11, "cET%YT~Q[4&gJV-&");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(1.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Electrico", owner0, car_CarType0, (-1216.93), (-1216.93), (-1630.3402195835), 6, point0, "=Ck");
      boolean boolean0 = car0.hasRange(point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Owner owner0 = new Owner("hc", "hc", "hc", 0, "hc");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-869.23));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hc", owner0, car_CarType0, (-869.23), (-869.23), (-869.23), 0, point0, "hc");
      boolean boolean0 = car0.hasRange(point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Owner owner0 = new Owner("=Ck", "hc", "hc", 0, "=Ck");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-869.23));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hc", owner0, car_CarType0, (-869.23), (-869.23), 0, 0, point0, "hc");
      car0.swapState();
      car0.swapState();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Owner owner0 = new Owner("#tsuCRO", "#tsuCRO", "", 524, "");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(524);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("#tsuCRO", owner0, car_CarType0, 524, 524, 2.0, 0, point0, "model.Car");
      car0.swapState();
      boolean boolean0 = car0.isAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Owner owner0 = new Owner("", "j\"2[mx`4RQ(@", "j\"2[mx`4RQ(@", 0, "j\"2[mx`4RQ(@");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = Double.valueOf((-630.891));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("j\"2[mx`4RQ(@", owner0, car_CarType0, 0, 0.4, 0.4, 0, point0, "");
      car0.rate(0);
      String string0 = car0.toString();
      assertEquals("j\"2[mx`4RQ(@\n0.00\n0.40\ntrue\n0", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.fromString("Electrico");
      assertEquals(Car.CarType.ELECTRIC, car_CarType0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.fromString("Todos");
      assertEquals(Car.CarType.ANY, car_CarType0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.fromString("Gasolina");
      assertEquals(Car.CarType.GAS, car_CarType0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      try { 
        Car.CarType.fromString("e=qzD+E~~t@:-gF");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Car$CarType", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.fromString("Hibrido");
      assertEquals(Car.CarType.HYBRID, car_CarType0);
      
      Double double0 = new Double((-99.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Hibrido", (Owner) null, car_CarType0, 1986, (-2096.9202245387587), 1986, 0, point0, "Hibrido");
      boolean boolean0 = car0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.valueOf("GAS");
      Car.CarType car_CarType1 = Car.CarType.ANY;
      boolean boolean0 = car_CarType0.equalsCar(car_CarType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Car.CarType car_CarType1 = Car.CarType.GAS;
      boolean boolean0 = car_CarType0.equalsCar(car_CarType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ANY;
      boolean boolean0 = car_CarType0.equalsCar(car_CarType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Owner owner0 = new Owner("=Ck", "hc", "hc", 0, "=Ck");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-45.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hc", owner0, car_CarType0, (-869.23), (-869.23), (-45.0), 0, point0, "hc");
      car0.refil();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Owner owner0 = new Owner("=Ck", "hc", "hc", 0, "=Ck");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-45.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hc", owner0, car_CarType0, (-869.23), (-869.23), (-45.0), 0, point0, "hc");
      String string0 = car0.getOwnerID();
      assertEquals("=Ck", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Owner owner0 = new Owner("=Ck", "hc", "hc", 0, "=Ck");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double((-45.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hc", owner0, car_CarType0, (-869.23), (-869.23), (-45.0), 0, point0, "hc");
      car0.pendingRental((Rental) null);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, (Owner) null, car_CarType0, (-1.0), (-1.0), 0.0, 738, point0, (String) null);
      // Undeclared exception!
      try { 
        car0.rate(738, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Owner owner0 = new Owner("", "", "", (-390), (String) null);
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0.0, (-562.405006831), (-390), (-390), point0, "");
      Car.CarType car_CarType1 = car0.getType();
      assertEquals(Car.CarType.ANY, car_CarType1);
  }
}
