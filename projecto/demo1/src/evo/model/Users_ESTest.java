/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 19 23:24:04 GMT 2020
 */

package model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import model.Client;
import model.Owner;
import model.User;
import model.Users;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import utils.Point;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Users_ESTest extends Users_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Users users0 = new Users();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, (String) null, (String) null, (String) null, (-47));
      client0.rate(0);
      users0.addUser(client0);
      User user0 = users0.getUser((String) null);
      assertFalse(user0.equals((Object)client0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Users users0 = new Users();
      Double double0 = new Double((-1991.584377));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, (String) null, "", "|rQfj%`/$", (-383));
      client0.rate((-1159));
      users0.addUser(client0);
      User user0 = users0.getUser((String) null);
      assertFalse(user0.equals((Object)client0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Users users0 = new Users();
      Owner owner0 = new Owner("iZ", "iZ", "iZ", 80982244, "iZ");
      users0.addUser(owner0);
      List<String> list0 = users0.getClientIDS();
      assertTrue(list0.contains("iZ"));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Users users0 = new Users();
      // Undeclared exception!
      try { 
        users0.addUser((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Users users0 = new Users();
      Users users1 = new Users();
      boolean boolean0 = users0.equals(users1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Users users0 = new Users();
      boolean boolean0 = users0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Users users0 = new Users();
      boolean boolean0 = users0.equals(users0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Users users0 = new Users();
      boolean boolean0 = users0.equals("j3ZHi,)LeZq< |=&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Users users0 = new Users();
      try { 
        users0.getUser("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Users users0 = new Users();
      Double double0 = new Double((-1991.584377));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, (String) null, "", "|rQfj%`/$", (-383));
      users0.addUser(client0);
      User user0 = users0.getUser((String) null);
      assertFalse(user0.equals((Object)client0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Users users0 = new Users();
      Double double0 = new Double((-1991.584377));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, (String) null, "", "|rQfj%`/$", (-383));
      users0.addUser(client0);
      try { 
        users0.addUser(client0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Users users0 = new Users();
      List<String> list0 = users0.getClientIDS();
      assertTrue(list0.isEmpty());
  }
}
