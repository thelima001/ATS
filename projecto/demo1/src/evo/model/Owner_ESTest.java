/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 19 23:12:33 GMT 2020
 */

package model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import model.Car;
import model.Client;
import model.Owner;
import model.Rental;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import utils.Point;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Owner_ESTest extends Owner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Owner owner0 = new Owner("hctIcU6_iN", "hctIcU6_iN", "hctIcU6_iN", (-165), "model.Owner");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(2336.711749599);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hctIcU6_iN", owner0, car_CarType0, 2336.711749599, 2336.711749599, (-165), (-165), point0, "");
      Rental rental0 = new Rental(car0, (Client) null, point0);
      owner0.refuse(rental0);
      assertEquals(100, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Owner owner0 = new Owner("q8k6:*]+}", "q8k6:*]+}", "q8k6:*]+}", 4, "q8k6:*]+}");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(4);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("q8k6:*]+}", owner0, car_CarType0, 4, 4, 4, 4, point0, "q8k6:*]+}");
      Client client0 = new Client(point0, "q8k6:*]+}", "q8k6:*]+}", "q8k6:*]+}", "q8k6:*]+}", 4);
      Rental rental0 = new Rental(car0, client0, point0);
      owner0.rate(rental0, 4);
      assertEquals(4, client0.getRates());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Owner owner0 = new Owner("", (String) null, "", (-392), "O*ap}`_8:y");
      owner0.rate(0);
      Owner owner1 = owner0.makeCopy();
      assertNotSame(owner1, owner0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Owner owner0 = new Owner("Uc]*R", "i2HzyS[T{a}>2oNGC=d", "Uc]*R", 2253, "i2HzyS[T{a}>2oNGC=d");
      owner0.rate((-1891));
      Owner owner1 = owner0.makeCopy();
      assertTrue(owner1.equals((Object)owner0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Owner owner0 = new Owner("hctIcU6_iN", "hctIcU6_iN", "hctIcU6_iN", (-165), "model.Owner");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(2336.711749599);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hctIcU6_iN", owner0, car_CarType0, 2336.711749599, 2336.711749599, (-165), (-165), point0, "");
      Rental rental0 = new Rental(car0, (Client) null, point0);
      owner0.addPendingRental(rental0);
      List<Rental> list0 = owner0.getPending();
      assertTrue(list0.contains(rental0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Owner owner0 = new Owner("Custo Total: ", "Custo Total: ", "&rE|0da|*@*", 17, ">_Wq(3i`6E9[^8");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(17);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("~s*WVGjF/JU4", owner0, car_CarType0, 17, 17, 17, 17, point0, "Custo Total: ");
      owner0.addCar(car0);
      List<Car> list0 = owner0.getCars();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Owner owner0 = new Owner("W", "W", "W", 17, "W");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 17, 17, 17, 17, point0, "y NE$aK+ZYeTd");
      Rental rental0 = new Rental(car0, (Client) null, point0);
      owner0.addPendingRental(rental0);
      Rental rental1 = new Rental(car0, (Client) null, point0);
      // Undeclared exception!
      try { 
        owner0.refuse(rental1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Owner owner0 = new Owner("W", "W", "W", 17, "W");
      List<Car> list0 = owner0.getCars();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Owner owner0 = new Owner("];", "];", "];", 17, "];");
      Owner owner1 = owner0.makeCopy();
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(17);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("];", owner1, car_CarType0, 17, 17, 17, 17, point0, "];");
      Client client0 = new Client(point0, "];", "];", "];", "];", 17);
      Rental rental0 = new Rental(car0, client0, point0);
      assertTrue(owner0.equals((Object)owner1));
      
      owner0.addPendingRental(rental0);
      boolean boolean0 = owner1.equals(owner0);
      assertFalse(owner1.equals((Object)owner0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Owner owner0 = new Owner("H(,p8AaF0 wLJ", "H(,p8AaF0 wLJ", "H(,p8AaF0 wLJ", 0, "H(,p8AaF0 wLJ");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("H(,p8AaF0 wLJ", owner0, car_CarType0, 0, 0, 0, 0, point0, "H(,p8AaF0 wLJ");
      owner0.addCar(car0);
      Owner owner1 = new Owner("H(,p8AaF0 wLJ", "H(,p8AaF0 wLJ", "H(,p8AaF0 wLJ", 0, "H(,p8AaF0 wLJ");
      boolean boolean0 = owner0.equals(owner1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Owner owner0 = new Owner("-a 24|N*Qr J5}_3 ", "-a 24|N*Qr J5}_3 ", "-a 24|N*Qr J5}_3 ", (-2113), "-a 24|N*Qr J5}_3 ");
      Owner owner1 = owner0.makeCopy();
      boolean boolean0 = owner0.equals(owner1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Owner owner0 = new Owner((String) null, (String) null, (String) null, (-2697), (String) null);
      boolean boolean0 = owner0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Owner owner0 = new Owner("-a 24|N*Qr J5}_3 ", "-a 24|N*Qr J5}_3 ", "-a 24|N*Qr J5}_3 ", (-2113), "-a 24|N*Qr J5}_3 ");
      boolean boolean0 = owner0.equals(owner0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Owner owner0 = new Owner("hctIcU6_iN", "hctIcU6_iN", "hctIcU6_iN", (-165), "model.Owner");
      Object object0 = new Object();
      boolean boolean0 = owner0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Owner owner0 = new Owner("hctIcU6_iN", "hctIcU6_iN", "hctIcU6_iN", (-165), "model.Owner");
      owner0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Owner owner0 = new Owner("hctIcU6_iN", "hctIcU6_iN", "hctIcU6_iN", (-165), "model.Owner");
      List<Rental> list0 = owner0.getPending();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Owner owner0 = new Owner("hctIcU6_iN", "hctIcU6_iN", "hctIcU6_iN", (-165), "model.Owner");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double(2336.711749599);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("hctIcU6_iN", owner0, car_CarType0, 2336.711749599, 2336.711749599, (-165), (-165), point0, "");
      Rental rental0 = new Rental(car0, (Client) null, point0);
      owner0.addPendingRental(rental0);
      Rental rental1 = new Rental(car0, (Client) null, point0);
      // Undeclared exception!
      try { 
        owner0.accept(rental1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Owner owner0 = new Owner("mZL36PJ7qd;[v09s", "mZL36PJ7qd;[v09s", "mZL36PJ7qd;[v09s", (-9), "mZL36PJ7qd;[v09s");
      owner0.accept((Rental) null);
      Owner owner1 = new Owner("mZL36PJ7qd;[v09s", "mZL36PJ7qd;[v09s", "mZL36PJ7qd;[v09s", (-9), "mZL36PJ7qd;[v09s");
      boolean boolean0 = owner0.equals(owner1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Owner owner0 = new Owner("mZL36PJ7qd;[v09s", "mZL36PJ7qd;[v09s", "mZL36PJ7qd;[v09s", (-9), "mZL36PJ7qd;[v09s");
      // Undeclared exception!
      try { 
        owner0.rate((Rental) null, (-9));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Owner", e);
      }
  }
}
