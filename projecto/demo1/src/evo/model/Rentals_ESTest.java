/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 19 23:22:05 GMT 2020
 */

package model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.List;
import model.Car;
import model.Client;
import model.Owner;
import model.Rental;
import model.Rentals;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;
import utils.Point;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Rentals_ESTest extends Rentals_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("model.Rentals", "($FTfk!{P]W3@xO, ", (String) null, (-4603), "+PFQ$H");
      Car.CarType car_CarType0 = Car.CarType.ELECTRIC;
      Double double0 = new Double((-4603));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("model.Rentals", owner0, car_CarType0, (-4603), (-4603), (-4603), (-4603), point0, "!");
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Rental rental0 = new Rental(car0, (Client) null, point0);
      LocalDateTime localDateTime1 = rental0.getDate();
      List<Rental> list0 = rentals0.getRentalListOwner(owner0, localDateTime1, localDateTime0);
      assertFalse(list0.contains(rental0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Owner owner0 = new Owner((String) null, (String) null, "E", (-3511), "E");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Car car0 = new Car((String) null, owner0, car_CarType0, 0.0, 0.0, 0.0, 31, point0, "Tempo Total: ");
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime1 = MockLocalDateTime.ofEpochSecond(31, 2305, zoneOffset0);
      double double1 = rentals0.getTotalBilledCar(car0, localDateTime1, localDateTime0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("", "", "Oz-dh]&6", 1, "");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, (-1673.7113779472138), 1.2, 1, point0, "");
      Client client0 = new Client(point0, "", "?L]kr{EN}F.=;(z", ",[T<jHA)yJ,c=Mf", "", 0);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      rentals0.addRental(rental0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner((String) null, (String) null, (String) null, 1197, (String) null);
      List<Rental> list0 = rentals0.getRentalListOwner(owner0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("", "", "Oz-dh]&6", 1, "");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, (-1673.7113779472138), 1.2, 1, point0, "");
      Client client0 = new Client(point0, "", "?L]kr{EN}F.=;(z", ",[T<jHA)yJ,c=Mf", "", 0);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      List<Rental> list0 = rentals0.getRentalListOwner(owner0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("{;v`Ti", "{;v`Ti", "", (-1158), "M;FN%_O:~9IF");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("{;v`Ti", owner0, car_CarType0, (-1158), 0.0, 0.0, 2988, point0, "");
      Client client0 = new Client(point0, "", "", "", "", (-2411));
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      List<Rental> list0 = rentals0.getRentalListClient(client0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Double double0 = new Double(1828.1085043971264);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("model.Rental", (Owner) null, car_CarType0, (-1210.152), 2503.827325, 2503.827325, 1, point0, "model.Rental");
      Client client0 = new Client(point0, "model.Rental", "model.Rental", "model.Rental", "model.Rental", 1);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      List<Rental> list0 = rentals0.getRentalListClient("model.Rental");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      // Undeclared exception!
      try { 
        rentals0.getTotalBilledCar((Car) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      // Undeclared exception!
      try { 
        rentals0.getRentalListOwner((Owner) null, localDateTime0, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner((String) null, "model.Rentals", "", 470, "model.Rentals");
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 4.0, 1360.07528246324, (-855.0), 0, point0, (String) null);
      Client client0 = new Client(point0, (String) null, "model.Rentals", "", "", 0);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      LocalDateTime localDateTime0 = rental0.getDate();
      // Undeclared exception!
      try { 
        rentals0.getRentalListClient(client0, localDateTime0, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      // Undeclared exception!
      try { 
        rentals0.getRentalListClient((Client) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner((String) null, (String) null, (String) null, (-2595), (String) null);
      Car.CarType car_CarType0 = Car.CarType.ANY;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 3025.78232961, 3025.78232961, (-2595), 611, point0, (String) null);
      Client client0 = new Client(point0, (String) null, "oit7t3CITJu", "", "", (-2595));
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      // Undeclared exception!
      try { 
        rentals0.getRentalListClient(":rv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Rentals rentals1 = new Rentals();
      boolean boolean0 = rentals0.equals(rentals1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      boolean boolean0 = rentals0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      boolean boolean0 = rentals0.equals(rentals0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      boolean boolean0 = rentals0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("", "", "", 2545, "");
      Car.CarType car_CarType0 = Car.CarType.HYBRID;
      Double double0 = new Double(2545);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 2545, 2545, 2545, 2545, point0, "");
      Client client0 = new Client(point0, "", "", "", "", 2545);
      Rental rental0 = new Rental(car0, client0, point0);
      LocalDateTime localDateTime0 = rental0.getDate();
      List<Rental> list0 = rentals0.getRentalListClient(client0, localDateTime0, localDateTime0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Owner owner0 = new Owner("", "Carro:          ", "", (-3992), "");
      Car.CarType car_CarType0 = Car.CarType.GAS;
      Car car0 = new Car("Carro:          ", owner0, car_CarType0, (-3992), 0.0, 0.0, (-3992), point0, "-nz;g])go1y\"Y`wBe");
      double double1 = rentals0.getTotalBilledCar(car0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      // Undeclared exception!
      try { 
        rentals0.getTotalBilledCar((Car) null, localDateTime0, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      List<Rental> list0 = rentals0.getRentalListClient((String) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      // Undeclared exception!
      try { 
        rentals0.getRentalListOwner((Owner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, "-nz;g])go1y\"Y`wBe", (String) null, "-nz;g])go1y\"Y`wBe", 0);
      List<Rental> list0 = rentals0.getRentalListClient(client0);
      assertTrue(list0.isEmpty());
  }
}
